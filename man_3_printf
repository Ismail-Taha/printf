# Printf_project

printf - Format and print data to the standard output

# SYNOPSIS
#include "main.h"
int _printf(const char *format, ...);

# DESCRIPTION
The _printf function is a custom implementation of the printf function in C. It formats and prints data to the standard output (stdout) based on the provided format string.

# RETURN VALUE
The _printf function returns the number of characters printed (excluding the null byte used to end output to strings). In case of an error, it returns -1.

# FORMAT SPECIFIERS
The format string can contain the following conversion specifiers:

- %c: Prints a character.
- %s: Prints a string.
- %%: Prints a percent sign.
-%S: print non printable charachter.
-%r: prints the reversed string.
-%R: prints the rot13'ed string.
-%p: print address.

In addition to the standard conversion specifiers, _printf supports the following custom conversion specifiers:

- %b: Converts an unsigned int argument to binary.
- %S: Prints a string with non-printable characters represented as \x, followed by the ASCII code value in hexadecimal (uppercase).

# EXAMPLES
Here are some examples of how to use _printf:

- _printf("%c\n", 'A'): Prints the character 'A'.
- _printf("%s\n", "Hello"): Prints the string "Hello".
- _printf("Value in binary: %b\n", 42): Prints the binary representation of 42.
- _printf("Non-printable character: %S\n", "Hello\x07World"): Prints the string with non-printable characters represented.

# AUTHOR
This custom printf implementation was created by :
Ismail-Taha <https://github.com/Ismail-Taha>
Youssef Rachidi <https://github.com/Joe-0009>

# SEE ALSO
man(1), printf(3)

# NOTES
This is a custom implementation of the printf function and may not provide all the features and behavior of the standard printf function in the C library.

